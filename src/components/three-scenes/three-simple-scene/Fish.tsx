/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/Fish.gltf -o src/components/three-scenes/three-simple-scene/Fish.tsx -r public 
*/

import * as THREE from "three";
import React, { useEffect } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";
import { useControls } from "leva";

export enum ActionName {
  Death = "Death",
  Duck = "Duck",
  HitReact = "HitReact",
  Idle = "Idle",
  Jump = "Jump",
  Jump_Idle = "Jump_Idle",
  Jump_Land = "Jump_Land",
  No = "No",
  Punch = "Punch",
  Run = "Run",
  Walk = "Walk",
  Wave = "Wave",
  Weapon = "Weapon",
  Yes = "Yes",
}

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Sphere026: THREE.SkinnedMesh;
    Sphere026_1: THREE.SkinnedMesh;
    Sphere026_2: THREE.SkinnedMesh;
    Sphere026_3: THREE.SkinnedMesh;
    Sphere026_4: THREE.SkinnedMesh;
    Sphere026_5: THREE.SkinnedMesh;
    Root: THREE.Bone;
  };
  materials: {
    Fish_Main: THREE.MeshStandardMaterial;
    Fish_Secondary: THREE.MeshStandardMaterial;
    Eye_Black: THREE.MeshStandardMaterial;
    Eye_White: THREE.MeshStandardMaterial;
    Mouth: THREE.MeshStandardMaterial;
    Fish_Flaps: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export function Fish(props: JSX.IntrinsicElements["group"]) {
  const group = React.useRef<THREE.Group>(null!);
  const { scene, animations } = useGLTF("/models/Fish.gltf");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  const { animation } = useControls({
    animation: { value: ActionName.Idle, options: Object.keys(actions) },
  });

  useEffect(() => {
    actions[animation as ActionName]?.reset().fadeIn(0.5).play();
    return () => {
      actions[animation as ActionName]?.fadeOut(0.5);
    };
  }, [animation]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="CharacterArmature">
          <primitive object={nodes.Root} />
          <group name="Fish">
            <skinnedMesh
              name="Sphere026"
              geometry={nodes.Sphere026.geometry}
              material={new THREE.MeshStandardMaterial({ color: 0xff0000 })}
              skeleton={nodes.Sphere026.skeleton}
            />
            <skinnedMesh
              name="Sphere026_1"
              geometry={nodes.Sphere026_1.geometry}
              material={materials.Fish_Secondary}
              skeleton={nodes.Sphere026_1.skeleton}
            />
            <skinnedMesh
              name="Sphere026_2"
              geometry={nodes.Sphere026_2.geometry}
              material={materials.Eye_Black}
              skeleton={nodes.Sphere026_2.skeleton}
            />
            <skinnedMesh
              name="Sphere026_3"
              geometry={nodes.Sphere026_3.geometry}
              material={materials.Eye_White}
              skeleton={nodes.Sphere026_3.skeleton}
            />
            <skinnedMesh
              name="Sphere026_4"
              geometry={nodes.Sphere026_4.geometry}
              material={materials.Mouth}
              skeleton={nodes.Sphere026_4.skeleton}
            />
            <skinnedMesh
              name="Sphere026_5"
              geometry={nodes.Sphere026_5.geometry}
              material={materials.Fish_Flaps}
              skeleton={nodes.Sphere026_5.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

// @ts-expect-error gltfjsx has no types
useGLTF.preload("/models/Fish.gltf");
